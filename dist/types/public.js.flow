/**
 * Flowtype definitions for public
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.0
 * @flow
 */

export type bigint_like = number | number | string;
declare export var AddressType: {|
  +BASE: 0, // 0
  +POINTER: 4, // 4
  +ENTERPRISE: 6, // 6
  +BYRON: 8, // 8
  +REWARD: 14, // 14
|};

declare export var CertificateType: {|
  +STAKE_REGISTRATION: 0, // 0
  +STAKE_DEREGISTRATION: 1, // 1
  +STAKE_DELEGATION: 2, // 2
  +STAKE_POOL_REGISTRATION: 3, // 3
|};

declare export var RelayType: {|
  +SINGLE_HOST_IP_ADDR: 0, // 0
  +SINGLE_HOST_HOSTNAME: 1, // 1
  +MULTI_HOST: 2, // 2
|};
declare export var HARDENED: 2147483648;
export type BIP32Path = Array<number>;
export type Network = {|
  protocolMagic: number,
  networkId: number,
|};
export type DeviceOwnedAddress =
  | {|
      type: typeof AddressType.BYRON,
      params: AddressParamsByron,
    |}
  | {|
      type: typeof AddressType.BASE,
      params: AddressParamsBase,
    |}
  | {|
      type: typeof AddressType.ENTERPRISE,
      params: AddressParamsEnterprise,
    |}
  | {|
      type: typeof AddressType.POINTER,
      params: AddressParamsPointer,
    |}
  | {|
      type: typeof AddressType.REWARD,
      params: AddressParamsReward,
    |};
export type AddressParamsByron = {|
  spendingPath: BIP32Path,
|};
export type AddressParamsBase = {|
  ...{|
    spendingPath: BIP32Path,
  |},
  ...AddressParamsBaseStaking,
|};
export type AddressParamsBaseStaking =
  | {|
      stakingPath: BIP32Path,
    |}
  | {|
      stakingKeyHashHex: string,
    |};
export type AddressParamsEnterprise = {|
  spendingPath: BIP32Path,
|};
export type AddressParamsPointer = {|
  spendingPath: BIP32Path,
  stakingBlockchainPointer: BlockchainPointer,
|};
export type AddressParamsReward = {|
  spendingPath: BIP32Path,
|};
export type TxInput = {|
  txHashHex: string,
  outputIndex: number,
  path: BIP32Path | null,
|};
export type Token = {|
  assetNameHex: string,
  amount: bigint_like,
|};
export type AssetGroup = {|
  policyIdHex: string,
  tokens: Array<Token>,
|};
export type TxOutput = {|
  amount: bigint_like,
  tokenBundle?: Array<AssetGroup> | null,
  destination: TxOutputDestination,
|};
declare export var TxOutputDestinationType: {|
  +THIRD_PARTY: "third_party", // "third_party"
  +DEVICE_OWNED: "device_owned", // "device_owned"
|};
export type ThirdPartyAddressParams = {|
  addressHex: string,
|};
export type TxOutputDestination =
  | {|
      type: typeof TxOutputDestinationType.THIRD_PARTY,
      params: ThirdPartyAddressParams,
    |}
  | {|
      type: typeof TxOutputDestinationType.DEVICE_OWNED,
      params: DeviceOwnedAddress,
    |};
export type BlockchainPointer = {|
  blockIndex: number,
  txIndex: number,
  certificateIndex: number,
|};
declare export var PoolOwnerType: {|
  +THIRD_PARTY: "third_party", // "third_party"
  +DEVICE_OWNED: "device_owned", // "device_owned"
|};
export type PoolOwner =
  | {|
      type: typeof PoolOwnerType.THIRD_PARTY,
      params: PoolOwnerThirdPartyParams,
    |}
  | {|
      type: typeof PoolOwnerType.DEVICE_OWNED,
      params: PoolOwnerDeviceOwnedParams,
    |};
export type PoolOwnerThirdPartyParams = {|
  stakingKeyHashHex: string,
|};
export type PoolOwnerDeviceOwnedParams = {|
  stakingPath: BIP32Path,
|};
export type SingleHostIpAddrRelayParams = {|
  portNumber?: number | null,
  ipv4?: string | null,
  ipv6?: string | null,
|};
export type SingleHostHostnameRelayParams = {|
  portNumber?: number | null,
  dnsName: string,
|};
export type MultiHostRelayParams = {|
  dnsName: string,
|};
export type Relay =
  | {|
      type: typeof RelayType.SINGLE_HOST_IP_ADDR,
      params: SingleHostIpAddrRelayParams,
    |}
  | {|
      type: typeof RelayType.SINGLE_HOST_HOSTNAME,
      params: SingleHostHostnameRelayParams,
    |}
  | {|
      type: typeof RelayType.MULTI_HOST,
      params: MultiHostRelayParams,
    |};
export type PoolMetadataParams = {|
  metadataUrl: string,
  metadataHashHex: string,
|};
export type Margin = {|
  numerator: bigint_like,
  denominator: bigint_like,
|};
export type PoolRegistrationParams = {|
  poolKeyHashHex: string,
  vrfKeyHashHex: string,
  pledge: bigint_like,
  cost: bigint_like,
  margin: Margin,
  rewardAccountHex: string,
  poolOwners: Array<PoolOwner>,
  relays: Array<Relay>,
  metadata?: PoolMetadataParams | null,
|};
export type StakeRegistrationParams = {|
  path: BIP32Path,
|};
export type StakeDeregistrationParams = {|
  path: BIP32Path,
|};
export type StakeDelegationParams = {|
  path: BIP32Path,
  poolKeyHashHex: string,
|};
export type Certificate =
  | {|
      type: typeof CertificateType.STAKE_REGISTRATION,
      params: StakeRegistrationParams,
    |}
  | {|
      type: typeof CertificateType.STAKE_DEREGISTRATION,
      params: StakeDeregistrationParams,
    |}
  | {|
      type: typeof CertificateType.STAKE_DELEGATION,
      params: StakeDelegationParams,
    |}
  | {|
      type: typeof CertificateType.STAKE_POOL_REGISTRATION,
      params: PoolRegistrationParams,
    |};
export type Withdrawal = {|
  path: BIP32Path,
  amount: bigint_like,
|};
export type Flags = {|
  isDebug: boolean,
|};
export type Version = {|
  major: number,
  minor: number,
  patch: number,
  flags: Flags,
|};
export type DeviceCompatibility = {|
  isCompatible: boolean,
  recommendedVersion: string | null,
  supportsMary: boolean,
|};
export type Serial = {|
  serial: string,
|};
export type DerivedAddress = {|
  addressHex: string,
|};
export type ExtendedPublicKey = {|
  publicKeyHex: string,
  chainCodeHex: string,
|};
export type Witness = {|
  path: BIP32Path,
  witnessSignatureHex: string,
|};
export type SignedTransactionData = {|
  txHashHex: string,
  witnesses: Array<Witness>,
|};
declare export var TxAuxiliaryDataType: {|
  +ARBITRARY_HASH: "arbitrary_hash", // "arbitrary_hash"
|};
export type TxAuxiliaryData = {|
  type: typeof TxAuxiliaryDataType.ARBITRARY_HASH,
  params: TxAuxiliaryDataArbitraryHashParams,
|};
export type TxAuxiliaryDataArbitraryHashParams = {|
  hashHex: string,
|};
export type Transaction = {|
  network: Network,
  inputs: Array<TxInput>,
  outputs: Array<TxOutput>,
  fee: bigint_like,
  ttl?: bigint_like | null,
  certificates?: Array<Certificate> | null,
  withdrawals?: Array<Withdrawal> | null,
  auxiliaryData?: TxAuxiliaryData | null,
  validityIntervalStart?: bigint_like | null,
|};
declare export var TransactionSigningMode: {|
  +ORDINARY_TRANSACTION: "ordinary_transaction", // "ordinary_transaction"
  +POOL_REGISTRATION_AS_OWNER: "pool_registration_as_owner", // "pool_registration_as_owner"
  +__RESEVED_POOL_REGISTRATION_AS_OPERATOR: "__pool_registration_as_operator", // "__pool_registration_as_operator"
|};
export type SignTransactionRequest = {|
  signingMode: $Values<typeof TransactionSigningMode>,
  tx: Transaction,
|};
