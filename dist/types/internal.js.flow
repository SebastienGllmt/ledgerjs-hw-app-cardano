/**
 * Flowtype definitions for internal
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import {
  AddressType,
  CertificateType,
  PoolOwnerType,
  RelayType,
  TransactionSigningMode,
  TxAuxiliaryDataType,
  TxOutputDestinationType,
} from "./public";
export type VarlenAsciiString = {|
  ...string,
  ...{|
    __type: "ascii",
  |},
|};
export type FixlenHexString<N> = {|
  ...string,
  ...{|
    __type: "hex",
    __length: N,
  |},
|};
export type HexString = {|
  ...string,
  ...{|
    __type: "hex",
  |},
|};
export type _Uint64_num = {|
  ...number,
  ...{|
    __type: "uint64_t",
  |},
|};
export type _Uint64_bigint = {|
  ...number,
  ...{|
    __type: "uint64_t",
  |},
|};
export type ValidBIP32Path = {|
  ...Array<Uint32_t>,
  ...{|
    __type: "bip32_path",
  |},
|};
export type Uint64_str = {|
  ...string,
  ...{|
    __type: "uint64_t",
  |},
|};
export type Uint32_t = {|
  ...number,
  ...{|
    __type: "uint32_t",
  |},
|};
export type Uint16_t = {|
  ...number,
  ...{|
    __type: "uint16_t",
  |},
|};
export type Uint8_t = {|
  ...number,
  ...{|
    __type: "uint8_t",
  |},
|};
declare export {
  AddressType,
  CertificateType,
  RelayType,
  PoolOwnerType,
  TxAuxiliaryDataType,
  TransactionSigningMode,
  TxOutputDestinationType,
};
declare export { Version, DeviceCompatibility } from "./public";
declare export var KEY_HASH_LENGTH: 28;
declare export var TX_HASH_LENGTH: 32;
export type ParsedCertificate =
  | {|
      type: typeof CertificateType.STAKE_REGISTRATION,
      path: ValidBIP32Path,
    |}
  | {|
      type: typeof CertificateType.STAKE_DEREGISTRATION,
      path: ValidBIP32Path,
    |}
  | {|
      type: typeof CertificateType.STAKE_DELEGATION,
      path: ValidBIP32Path,
      poolKeyHashHex: FixlenHexString<typeof KEY_HASH_LENGTH>,
    |}
  | {|
      type: typeof CertificateType.STAKE_POOL_REGISTRATION,
      pool: ParsedPoolParams,
    |};
declare export var TOKEN_POLICY_LENGTH: 28;
export type ParsedToken = {|
  assetNameHex: HexString,
  amount: Uint64_str,
|};
export type ParsedAssetGroup = {|
  policyIdHex: FixlenHexString<typeof TOKEN_POLICY_LENGTH>,
  tokens: Array<ParsedToken>,
|};
export type ParsedNetwork = {|
  protocolMagic: Uint32_t,
  networkId: Uint8_t,
|};
export type ParsedTxAuxiliaryData = {|
  type: typeof TxAuxiliaryDataType.ARBITRARY_HASH,
  hashHex: FixlenHexString<32>,
|};
export type ParsedTransaction = {|
  network: ParsedNetwork,
  inputs: ParsedInput[],
  outputs: ParsedOutput[],
  fee: Uint64_str,
  ttl: Uint64_str | null,
  certificates: ParsedCertificate[],
  withdrawals: ParsedWithdrawal[],
  auxiliaryData: ParsedTxAuxiliaryData | null,
  validityIntervalStart: Uint64_str | null,
|};
export type ParsedSigningRequest = {|
  tx: ParsedTransaction,
  signingMode: $Values<typeof TransactionSigningMode>,
|};
export type ParsedInput = {|
  txHashHex: FixlenHexString<typeof TX_HASH_LENGTH>,
  outputIndex: Uint32_t,
  path: ValidBIP32Path | null,
|};
export type ParsedWithdrawal = {|
  amount: Uint64_str,
  path: ValidBIP32Path,
|};
export type ParsedMargin = {|
  numerator: Uint64_str,
  denominator: Uint64_str,
|};
export type ParsedPoolParams = {|
  keyHashHex: FixlenHexString<28>,
  vrfHashHex: FixlenHexString<32>,
  pledge: Uint64_str,
  cost: Uint64_str,
  margin: ParsedMargin,
  rewardAccountHex: FixlenHexString<29>,
  owners: ParsedPoolOwner[],
  relays: ParsedPoolRelay[],
  metadata: ParsedPoolMetadata | null,
|};
export type ParsedPoolOwner =
  | {|
      type: typeof PoolOwnerType.DEVICE_OWNED,
      path: ValidBIP32Path,
    |}
  | {|
      type: typeof PoolOwnerType.THIRD_PARTY,
      hashHex: FixlenHexString<typeof KEY_HASH_LENGTH>,
    |};
export type ParsedPoolRelay =
  | {|
      type: typeof RelayType.SINGLE_HOST_IP_ADDR,
      port: Uint16_t | null,
      ipv4: Buffer | null,
      ipv6: Buffer | null,
    |}
  | {|
      type: typeof RelayType.SINGLE_HOST_HOSTNAME,
      port: Uint16_t | null,
      dnsName: VarlenAsciiString,
    |}
  | {|
      type: typeof RelayType.MULTI_HOST,
      dnsName: VarlenAsciiString,
    |};
export type ParsedPoolMetadata = {|
  ...{|
    url: VarlenAsciiString,
    hashHex: FixlenHexString<32>,
  |},
  ...{|
    __brand: "pool_metadata",
  |},
|};
declare export var StakingChoiceType: {|
  +NO_STAKING: "no_staking", // "no_staking"
  +STAKING_KEY_PATH: "staking_key_path", // "staking_key_path"
  +STAKING_KEY_HASH: "staking_key_hash", // "staking_key_hash"
  +BLOCKCHAIN_POINTER: "blockchain_pointer", // "blockchain_pointer"
|};
declare type ParsedBlockchainPointer = {|
  blockIndex: Uint32_t,
  txIndex: Uint32_t,
  certificateIndex: Uint32_t,
|};
declare type StakingChoiceNone = {|
  type: typeof StakingChoiceType.NO_STAKING,
|};
declare type StakingChoicePath = {|
  type: typeof StakingChoiceType.STAKING_KEY_PATH,
  path: ValidBIP32Path,
|};
declare type StakingChoiceHash = {|
  type: typeof StakingChoiceType.STAKING_KEY_HASH,
  hashHex: FixlenHexString<typeof KEY_HASH_LENGTH>,
|};
declare type StakingChoicePointer = {|
  type: typeof StakingChoiceType.BLOCKCHAIN_POINTER,
  pointer: ParsedBlockchainPointer,
|};
export type StakingChoice =
  | StakingChoiceNone
  | StakingChoicePath
  | StakingChoiceHash
  | StakingChoicePointer;
declare type ByronAddressParams = {|
  type: typeof AddressType.BYRON,
  protocolMagic: Uint32_t,
  spendingPath: ValidBIP32Path,
  stakingChoice: StakingChoiceNone,
|};
declare type ShelleyAddressParams = {|
  ...{|
    type:
      | typeof AddressType.BASE
      | typeof AddressType.ENTERPRISE
      | typeof AddressType.POINTER
      | typeof AddressType.REWARD,
    networkId: Uint8_t,
    spendingPath: ValidBIP32Path,
  |},
  ...
    | {|
        type: typeof AddressType.BASE,
        stakingChoice: StakingChoicePath | StakingChoiceHash,
      |}
    | {|
        type: typeof AddressType.ENTERPRISE,
        stakingChoice: StakingChoiceNone,
      |}
    | {|
        type: typeof AddressType.POINTER,
        stakingChoice: StakingChoicePointer,
      |}
    | {|
        type: typeof AddressType.REWARD,
        stakingChoice: StakingChoiceNone,
      |},
|};
export type ParsedAddressParams = ByronAddressParams | ShelleyAddressParams;
export type OutputDestination =
  | {|
      type: typeof TxOutputDestinationType.THIRD_PARTY,
      addressHex: HexString,
    |}
  | {|
      type: typeof TxOutputDestinationType.DEVICE_OWNED,
      addressParams: ParsedAddressParams,
    |};
export type ParsedOutput = {|
  amount: Uint64_str,
  tokenBundle: ParsedAssetGroup[],
  destination: OutputDestination,
|};
declare export var ASSET_NAME_LENGTH_MAX: 32;
