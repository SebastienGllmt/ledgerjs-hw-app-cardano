/**
 * Flowtype definitions for Ada
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import Transport from "@ledgerhq/hw-transport";
import { InvalidDataReason } from "./errors/invalidDataReason";
import type { Interaction, SendParams } from "./interactions/common/types";
import type {
  ParsedAddressParams,
  ParsedSigningRequest,
  ValidBIP32Path,
} from "./types/internal";
import type {
  BIP32Path,
  DerivedAddress,
  DeviceCompatibility,
  DeviceOwnedAddress,
  ExtendedPublicKey,
  Network,
  Serial,
  SignedTransactionData,
  SignTransactionRequest,
  Transaction,
  Version,
} from "./types/public";
import {
  AddressType,
  CertificateType,
  RelayType,
  TransactionSigningMode,
} from "./types/public";
import utils from "./utils";
declare export * from "./errors"
declare export * from "./types/public"
export type SendFn = (params: SendParams) => Promise<Buffer>;
declare export class Ada {
  transport: Transport<string>;
  _send: SendFn;
  constructor(transport: Transport<string>, scrambleKey?: string): this;
  getVersion(): Promise<GetVersionResponse>;
  _getVersion(): Interaction<Version>;
  getSerial(): Promise<GetSerialResponse>;
  _getSerial(): Interaction<GetSerialResponse>;
  runTests(): Promise<void>;
  _runTests(): Interaction<void>;
  getExtendedPublicKeys(
    x: GetExtendedPublicKeysRequest
  ): Promise<GetExtendedPublicKeysResponse>;
  _getExtendedPublicKeys(
    paths: ValidBIP32Path[]
  ): Generator<SendParams, ExtendedPublicKey[], Buffer>;
  getExtendedPublicKey(
    x: GetExtendedPublicKeyRequest
  ): Promise<GetExtendedPublicKeyResponse>;
  deriveAddress(x: DeriveAddressRequest): Promise<DeriveAddressResponse>;
  _deriveAddress(
    addressParams: ParsedAddressParams
  ): Interaction<DerivedAddress>;
  showAddress(x: ShowAddressRequest): Promise<void>;
  _showAddress(addressParams: ParsedAddressParams): Interaction<void>;
  signTransaction(
    request: SignTransactionRequest
  ): Promise<SignTransactionResponse>;
  _signTx(request: ParsedSigningRequest): Interaction<SignedTransactionData>;
}
export type GetVersionResponse = {|
  version: Version,
  compatibility: DeviceCompatibility,
|};
export type GetExtendedPublicKeysRequest = {|
  paths: BIP32Path[],
|};
export type GetExtendedPublicKeysResponse = Array<ExtendedPublicKey>;
export type GetExtendedPublicKeyRequest = {|
  path: BIP32Path,
|};
export type GetExtendedPublicKeyResponse = ExtendedPublicKey;
export type DeriveAddressRequest = {|
  network: Network,
  address: DeviceOwnedAddress,
|};
export type DeriveAddressResponse = DerivedAddress;
export type ShowAddressRequest = DeriveAddressRequest;
export type GetSerialResponse = Serial;
export type SignTransactionResponse = SignedTransactionData;
export type { Transaction, DeviceOwnedAddress };
declare export {
  AddressType,
  CertificateType,
  RelayType,
  InvalidDataReason,
  TransactionSigningMode,
  utils,
};
declare export default typeof Ada;
declare export var Networks: {|
  Mainnet: Network,
  Testnet: Network,
|};
